# --------------------( LICENSE                            )--------------------
# Copyright 2025 by Cecil Curry.
# See "LICENSE" for further details.
#
# --------------------( SYNOPSIS                           )--------------------
# Hyprland configuration optimized for use with HYDE (HYperland Desktop
# Environment). In other words:
#
# █░█ █▀ █▀▀ █▀█   █▀█ █▀█ █▀▀ █▀▀ █▀
# █▄█ ▄█ ██▄ █▀▄   █▀▀ █▀▄ ██▄ █▀░ ▄█
#
# --------------------( SEE ALSO                           )--------------------
# * Default HYDE "userprefs.conf" template:
#   https://github.com/prasanthrangan/hyprdots/blob/main/Configs/.config/hypr/userprefs.t2

# ....................{ TODO                               }....................
#FIXME: Augment Kitty into a Kuake-like experience with the assistance of
#"hdrop", which trivially enables *ANY* arbitrary command to be run in a
#toggle-able state under Hyprland. Default examples integrating "hdrop" + Kitty
#make this even easier. See also:
#* Official upstream repository:
#  https://github.com/Schweber/hdrop
#* Official Hyprland third-party "contrib" repository also providing "hdrop":
#  https://github.com/hyprwm/contrib/blob/main/hdrop/hdrop
#
#The only issue? Workspaces. "hdrop" accomplishes this magic by associating a
#unique window class with the desired command. We have eight workspaces. Ergo,
#what we'd *REALLY* need is a way to define workspace-specific key bindings.
#Under each workspace, we'd then bind <Super-T> or whatevah to run "hdrop" +
#Kitty with a window class unique to the current workspace.
#
#Oh, ho. We see. That's readily feasible as well. How? Leverage the stock
#"hyprctl" command, which enables dynamic keybindings to be defined: e.g.,
#    hyprctl keyword bind SUPER,O,pseudo
#
#See also:
#* Official "hyperctl" documentation on the "keyword" subcommand:
#  https://wiki.hyprland.org/Configuring/Using-hyprctl/#keyword
#
#If we put everything above together, we *SHOULD* then be able to chain multiple
#"bind" commands together ala:
#    bind = $mainMod, e, workspace, 1
#    bind = $mainMod, e, exec, hyprctl keyword bind "$mainMod, t, exec, hdrop kitty --class kitty_1"
#    bind = $mainMod, u, workspace, 2
#    bind = $mainMod, u, exec, hyprctl keyword bind "$mainMod, t, exec, hdrop kitty --class kitty_2"
#
#...and so on. Does that actually work? No idea.

# ....................{ VARIABLES ~ hyprland               }....................
# Define Hyprland-specific global variables globally accessible to *ALL*
# subsequently run Hyprland configuration files (including this file).

# Absolute filename of the third-party "hdrop" Bash script run below. See also:
#     https://github.com/Schweber/hdrop
# $hdrop = /home/leycec/bin/hdrop
$kittydrop = /home/leycec/bin/kittydrop

#FIXME: Doesn't appear to do anything, sadly. *sigh*
# Absolute or relative name of the command (i.e., executable file) responsible
# for locking the screen on idle *OR* the empty string to disable locking. See
# the "hypridle.conf" configuration file for the default value of this setting.
$IDLE =
$LOCKSCREEN =

# ....................{ VARIABLES ~ shell                  }....................
# Define POSIX-compliant shell environment variables globally accessible to
# *ALL* subsequently run processes (including this process).

# Define an obscure SSH-specific hack required to permissively cache *ALL* SSH
# passwords on the first successful entry of those passwords for the duration of
# the current boot cycle. See also these related configuration files:
#     ~/.config/systemd/user/ssh-agent.service
#     ~/.ssh/config
env = SSH_AUTH_SOCK,$XDG_RUNTIME_DIR/ssh-agent.socket

# ....................{ KEYS                               }....................
# User-specific key bindings, overriding the default key bindings configured by
# the "keybindings.conf" file. Note that HYDE silently replaces the contents of
# the "keybindings.conf" file on each update, implying that file to *NOT* be
# safely editable. Instead, configure key bindings in this file.

binds {
    # Allow the Hyprland-specific "movefocus" command (bound by default to the
    # four cardinal <Super-Arrow key> key bindings) to cycle between windows,
    # even when the current window is full screen.
    movefocus_cycles_fullscreen = true
}

input {
    # Disable <Numlock> by default. For some inane reason, Hyprland actually
    # enables <Numlock> by default. *facepalm*
    numlock_by_default = false
}

# ....................{ KEYS ~ windows                     }....................
# Rebind default key bindings unbound below to alternate key bindings,
# copy-pasted as is from the official "keybindings.conf" file.

# First, unbind all existing bindings currently bound to these keys for safety.
unbind = $mainMod, T
unbind = $mainMod, W
unbind = $mainMod, backspace
unbind = $mainMod, ESCAPE
unbind = $mainMod, SPACE

# Bind <Super+Spacebar> to a Kuake-like workspace-specific Kitty terminal.
# Specifically, toggle between either:
# * If a unique Kitty terminal isolated to the current workspace is *NOT* the
#   currently focused window, focus this terminal.
# * Else, this terminal is the currently focused window. In this case, focus
#   away from this terminal to the next window in this workspace.
bind = $mainMod, SPACE, exec, $kittydrop

# Bind <Super+Alt+Delete> to immediately kill the current window.
bind = $mainMod ALT, backspace, exec, ~/.config/hypr/scripts/dontkillsteam.sh # killactive, kill the window on focus

# Bind <Super+Alt+Escape> to interactively shutdown the current session.
bind = $mainMod Alt, ESCAPE, exec, ~/.config/hypr/scripts/logoutlaunch.sh 1 # logout menu

# Bind <Super+w> to toggle Waybar visibility on and off.
bind = $mainMod, W, exec, killall waybar || waybar # toggle waybar

# ....................{ KEYS ~ workspace                   }....................
# Switch workspaces with <mainMod+[w-v]>. By default, Hyprland binds keys to
# switch workspaces with <mainMod+[1-9]>. To reduce RSI, we strongly prefer
# common key bindings to be situated about the home keys.
#
# Note that:
# * Alphabetic keys *MUST* be bound to their uppercase variants. Why? No idea.
#   Binding alphabetic keys to their lowercase variants fails to unbind the
#   default bindings bound to those keys. Presumably, this is because those
#   default bindings were bound to the uppercase variants of these keys and can
#   thus *ONLY* be unbound to the same uppercase variants. In other words:
#   * Key bindings are case-*INSENSITIVE.* However...
#   * Key unbindings are case-*SENSITIVE.* This smells like a Hyprland bug that
#     will probably never be resolved. Let's just roll with the punches, folks.

# First, unbind all existing bindings currently bound to these keys for safety.
unbind = $mainMod, E
unbind = $mainMod, U
unbind = $mainMod, P  # <-- unbinds default screen capture key binding
unbind = $mainMod, period
unbind = $mainMod, comma
unbind = $mainMod, O
unbind = $mainMod, Q  # <-- unbinds default window killing key binding
unbind = $mainMod, J  # <-- unbinds default window layout key binding
unbind = $mainMod, K  # <-- unbinds default keyboard layout key binding

# Next, rebind workspace switching to these keys.
#
# Additionally, for each workspace, dynamically bind <Super+t> to transparently
# open either a new Kitty terminal *OR* a previously opened Kitty terminal as a
# Kuake-style dropdown isolated to this workspace.
#
# Note that these dynamic bindings are effectively all copy-pastes of another
# with only minute changes. Sadly, the Hyprland scripting language isn't exactly
# Python. The result violates even the Don't Repeat Yourself (DRY) Principle but
# is probably the best that can be done for now. We sigh bathetically.
bind = $mainMod, E, workspace, 1
# bind = $mainMod, E, exec, hyprctl keyword bind "$mainMod, S, exec, $kittydrop 1"
# bind = $mainMod, E, exec, hyprctl keyword bind "$mainMod, S, exec, $kittydrop"
# bind = $mainMod, E, exec, hyprctl keyword bind "$mainMod, S, exec,  kitty --class kitty_1"
# bind = $mainMod, E, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyE"
# bind = $mainMod, U, workspace, 2
bind = $mainMod, U, workspace, 2
# bind = $mainMod, U, exec, hyprctl keyword bind "$mainMod, S, exec, $kittydrop 2"
# bind = $mainMod, U, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyU"
# bind = $mainMod, U, exec, hyprctl keyword bind "$mainMod, S, fullscreen"
bind = $mainMod, P, workspace, 3
# bind = $mainMod, P, exec, hyprctl keyword bind "$mainMod, S, exec, $kittydrop 3"
# bind = $mainMod, P, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyP"
# bind = $mainMod, P, exec, hyprctl keyword bind "$mainMod, S, fullscreen"
bind = $mainMod, period, workspace, 4
# bind = $mainMod, period, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyperiod"
bind = $mainMod, comma, workspace, 5
# bind = $mainMod, comma, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittycomma"
bind = $mainMod, O, workspace, 6
# bind = $mainMod, O, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyO"
bind = $mainMod, Q, workspace, 7
# bind = $mainMod, Q, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyQ"
bind = $mainMod, J, workspace, 8
# bind = $mainMod, J, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyJ"
bind = $mainMod, K, workspace, 9
# bind = $mainMod, K, exec, hyprctl keyword bind "$mainMod, S, exec, $hdrop kitty --class kittyK"

# ....................{ MOUSE                              }....................
# Mouse cursor configuration.
cursor {
    # Number of seconds of mouse inactivity after which Hyprland hides the mouse
    # cursor. The default of ~5s is a little long. So, we reduce this default.
    inactive_timeout = 1

    # Force Hyprland to render the mouse cursor with unaccelerated software
    # (i.e., CPU-based) rather than accelerated hardware (i.e., GPU-based)
    # routines. Although Hyprland understandably defaults to the latter, doing
    # so currently fails to display a mouse cursor under full-screen
    # WINE-emulated Windows applications or games.
    #
    # See also this upstream issue:
    #    https://github.com/hyprwm/Hyprland/issues/6106
    no_hardware_cursors = true
}

# ....................{ VIDEO                              }....................
# Miscellaneous configuration.
misc {
    # Silently re-enable DPMS (i.e., disable screen blanking) on the first user
    # input after silently disabling DPMS due to user inactivity above.
    mouse_move_enables_dpms = true
    key_press_enables_dpms = true
}

# Experimental configuration.
#
# Enable experimental support for Wayland's color management protocol. Note
# that:
# * Valve's gamescope now requires this, making this effectively mandatory.
# * This support is currently Potemkin. Hyprland currently lacks color
#   management support. Enabling this configuration setting only masquerades to
#   downstream clients (like gamescope) that Hyprland supports this protocol
#   *WITHOUT* actually doing so.
debug:full_cm_proto = true

# ....................{ WINDOW ~ idle                      }....................
# Prevent "hypridle" from idling *ANY* fullscreened window. Since most games run
# as fullscreened windows, this has the beneficial side effect of preventing
# games from being improperly idled. See also this upstream issue:
#     https://github.com/hyprwm/Hyprland/issues/9170#issuecomment-2614145972
windowrulev2 = idleinhibit fullscreen, class:.*

#FIXME: Donate this back to "hyprdots", please. Pretty much *EVERBODY* wants
#this, honestly. Requisite installation commands include:
#    yay -S swayidle sway-audio-idle-inhibit-git

#FIXME: Great -- except I currently lack sufficient time to configure this
#properly. The issue is gaming. "swayidle" works great *UNLESS* I'm currently
#gaming. At that point, "swayidle" insists on idling regardless of what I do.
#"gamemoderun" doesn't work. "wljoywake" doesn't work. It's incredibly
#frustrating. For now, avoid. It is sad.
# Start the "swayidle" daemon on hyprland startup, configured to silently
# disable Display Power Management Signaling (DPMS) (i.e., enable screen
# blanking) after 300 seconds (i.e., 5 minutes) of user inactivity.
#exec-once = swayidle timeout 300 'hyprctl dispatcher dpms off'

# Start the "sway-audio-idle-inhibit" daemon on hyprland startup, silently
# disabling "swayidle" on detecting audio input and/or output. This effectively
# prevents "swayidle" from blanking the screen while watching media.
#exec-once = sway-audio-idle-inhibit

# Start the "wljoywake" daemon on hyprland startup, silently disabling
# "swayidle" on detecting USB-based joypad input and/or output. This effectively
# prevents "swayidle" from blanking the screen while gaming.
#exec-once = wljoywake &
